These are notes for CSS programming

Sections:
1: The Basics
    1.1: CSS Rules
    1.2: Attributes
        1.2.1: Width
        1.2.2: Padding
        1.2.3: Margine
    1.3: Rules
    1.4: Styling Classes
    1.5: Styling IDs
    1.6: Inheritance
2: Bootstrap
    2.1: What is Bootstrap?
    2.2: Adding Bootstrap
    2.3: Coding Bootstrap
        2.3.1: Bootstrap Classes
        2.3.2: Columns
3: Preprocessors

Section 1: The Basics
    1.1: CSS Rules
        CSS is programmed using rules.  This means that you must first specify which html code you are styling, and then select what attribute you are style, and give a rule.
        For example, if you wanted to style the h1 element in your HTML -> h1 {attribute: rule;}.  Remember to include a semi-colon at the end of each rule.  Doing so allows you
        to style multiple attributes within one rule.
    1.2: Attributes
        Attributes for an html element can be font-size, text color, font-style, etc.  Use google to find a list of all attributes you can style.
        1.2.1: Width
            The width attribute can be used to specify how wide an html element should be, in pixels.  Just as with font size, use a number followed by px.  e.g. width: 500px;
        1.2.2: Padding
            Padding determines the amount of space between an elements border, and the center of the element.  For example, the higher the padding value the more squashed the elements
            inside are.  With smaller padding, content and elements inside will be closer to the edges of the parent element. Can use top, bottom, left, right or stack them in a
            clockwise order like padding: 10px 10px 10px 10px.
        1.2.3: Margin
            Margin controls the amount of space between an elements border and the elements outside of it.  The higher the margin the more squashed an element is inside outer elements.
            If you set the margins to a negative value, the element will grow and take up more space of its surrounding element.  can use top, bottom, left, right or stack them in
            a clockwise order like margin: 10px 10px 10px 10px.
    1.3: Rules
        Rules determine what stye the particular attribute should take on.  For example what colour, what size, what look is that section of the page going to have?
    1.4: Styling Classes
        To style classes, rather than just using the element identifier, you must use a fullstop followed by the class name.  E.g. .navbar {foo: bar}.
    1.5: Styling IDs
        Similar to classes, to style IDs use a hash followed by the name of the ID.  e.g. #entry-box {foo:bar;}
    1.6: Inheritance
        Elements will inherit the style rules of its parent element.  Therefore any rule you apply to an element will also apply to all nested elements, unless the nested elements
        have its own set of rules for the same attribute being styled.  The rules of a child element will not apply to a child element.  In the event that multiple rules are styling
        the same element, the last rule will always win.  However, ID styling has precedence over class and element styling, and inline styling has precedence over that.
    1.7: !important
        Should you need to override your own style rules or that brought in by a library, the !important attribute will take precedence over all else.
        e.g. color: green !important;
    1.8: Colours
        Colours can be typed as their normal name, by using their rgb value, or by using their hex code.  In order to use rgb you use the parameters rgb(foo,bar,baz). To use a
        hexcode use the hash symbol and 6 hexcharacters, e.g. #FFAA00
Section 2: Bootstrap
    2.1: What is Bootstrap?
        Bootstrap is a css framework with pre-styled classes that you can use in your html code.  The classes are responsive and come with attributes and rules so you do not have
        to come up with them yourself.  However, you should change some of the styling on them to make your page unique.
    2.2.: Adding Bootstrap
        You can add Bootstrap to a CSS file through a CDN (Content Delivery Network).
        Pasting this code <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css"/> will make Bootstrap available.
    2.3: Coding Bootstrap
        Adding the premade Bootstrap classes around your existing code will give them the functionality you want, depending on the class name.
        2.3.1: Bootstrap Classes
            Here is a brief list of useful Bootstrap classes.
            container-fluid: used to fit the container through full width of the screen
            img-responsive: makes the image scale to its parent element
            text-center: aligns the text to the center
            text-primary: makes the text blue
            btn: creates a plain bootstrap button, grey with rounded borders
            btn-block: makes the button span the width of its parent container
            btn-primary: makes the button blue coloured
            btn-info: makes the button light blue
            btn-delete: makes the button red
            row: creates a container for responsive columns
        2.3.2: Columns
            Bootstrap uses columns to span elements across the screen.  There are 12 columns that span the page, and you can use Bootstrap to divide the page up into groups of
            12, 8 and 4, 3 4s, and 2 6s.
            col-foo-bar : foo = xs, sm, md, lg for screen size. bar = span size 1 to 12.
Section 3: Preprocessors.